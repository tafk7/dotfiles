# Set DOTFILES_DIR for this installation
export DOTFILES_DIR="/home/tafk/dotfiles"

# Modern Zsh Configuration - Optimized for VS Code + Visual Workflow
# Uses Starship prompt for fast startup with visual features
# Single optimized configuration - no switching needed

# Fix locale settings to prevent warnings
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# ==============================================================================
# Essential Zsh Options
# ==============================================================================

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=100000

# History options (only the essential ones)
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format
setopt INC_APPEND_HISTORY        # Write to the history file immediately
setopt SHARE_HISTORY             # Share history between all sessions
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first
setopt HIST_IGNORE_DUPS          # Don't record duplicates
setopt HIST_IGNORE_SPACE         # Don't record entries starting with a space
setopt HIST_VERIFY               # Don't execute immediately upon history expansion

# Navigation options
setopt AUTO_PUSHD               # Push the current directory visited on the stack
setopt PUSHD_IGNORE_DUPS        # Do not store duplicates in the stack
setopt PUSHD_SILENT             # Do not print the directory stack

# Expansion and globbing
setopt EXTENDED_GLOB            # Use extended globbing syntax
setopt GLOB_DOTS               # Include dotfiles in globbing

# Completion options
setopt COMPLETE_IN_WORD        # Complete from both ends of a word
setopt ALWAYS_TO_END          # Move cursor to the end of a completed word
setopt AUTO_LIST              # List choices on ambiguous completion
setopt AUTO_PARAM_SLASH       # Add trailing slash for directories

# ==============================================================================
# Load Shared Environment
# ==============================================================================

# Source environment variables (merged from env/common.sh, env/fzf.sh, env/wsl.sh)
if [[ -f "$DOTFILES_DIR/shell/env.sh" ]]; then
    source "$DOTFILES_DIR/shell/env.sh"
fi

# Load theme configuration if available
if [[ -f "$HOME/.config/dotfiles/theme.sh" ]]; then
    source "$HOME/.config/dotfiles/theme.sh"
fi

# ==============================================================================
# Starship Prompt
# ==============================================================================

# Initialize starship if available
if command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
else
    # Fallback to simple prompt if starship not installed
    PS1='%F{cyan}%~%f %# '
fi

# ==============================================================================
# Completion System
# ==============================================================================

# Initialize completion system
autoload -Uz compinit
compinit

# Basic completion styling
zstyle ':completion:*' completer _complete _ignored
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' menu select
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Docker completion
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

# ==============================================================================
# Key Bindings
# ==============================================================================

# Emacs-style key bindings (default)
bindkey -e

# History search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward

# Better word navigation
bindkey '^[[1;5C' forward-word    # Ctrl+Right
bindkey '^[[1;5D' backward-word   # Ctrl+Left

# Edit command line in editor
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

# ==============================================================================
# FZF Integration
# ==============================================================================

# FZF configuration
if command -v fzf >/dev/null 2>&1; then
    # Source FZF key bindings and completion
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    
    # Enhanced FZF options with preview
    export FZF_DEFAULT_OPTS="
        --height 40% 
        --layout=reverse 
        --border
        --preview-window=right:60%
        --bind 'ctrl-/:change-preview-window(down|hidden|)'"
    
    # Use fd for file search if available
    if command -v fd >/dev/null 2>&1; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
    
    # Preview files with bat
    if command -v bat >/dev/null 2>&1; then
        export FZF_CTRL_T_OPTS="--preview 'bat --style=numbers --color=always --line-range :500 {}'"
    elif command -v batcat >/dev/null 2>&1; then
        export FZF_CTRL_T_OPTS="--preview 'batcat --style=numbers --color=always --line-range :500 {}'"
    fi
    
    # Enhanced directory search
    export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

    # Load fzf key bindings (Ctrl-R for history, Ctrl-T for files, Alt-C for cd)
    if [[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ]]; then
        source /usr/share/doc/fzf/examples/key-bindings.zsh
    fi

    # Load fzf completion
    if [[ -f /usr/share/doc/fzf/examples/completion.zsh ]]; then
        source /usr/share/doc/fzf/examples/completion.zsh
    fi
fi

# ==============================================================================
# Modern CLI Tools
# ==============================================================================

# Zoxide for smart directory jumping
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
    alias cd='z'  # Optional: replace cd with zoxide
fi

# ==============================================================================
# Node.js - Lazy Load NVM
# ==============================================================================

# Lazy load NVM for faster startup
if [ -s "$NVM_DIR/nvm.sh" ]; then
    alias nvm='unalias nvm; [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; nvm'
    alias node='unalias node; unalias nvm; [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; node'
    alias npm='unalias npm; unalias nvm; [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; npm'
fi

# ==============================================================================
# WSL Integration
# ==============================================================================

if [[ "$IS_WSL" == "true" ]]; then
    # WSL-specific aliases (most are in shell/aliases/wsl.sh)
    alias winget='/mnt/c/Windows/System32/winget.exe'
fi

# ==============================================================================
# Load Dotfiles Functions and Aliases
# ==============================================================================

# Load functions (merged core and fzf-extras)
[[ -f "$DOTFILES_DIR/shell/functions.sh" ]] && source "$DOTFILES_DIR/shell/functions.sh"
# Load WSL functions if on WSL
[[ "$IS_WSL" == "true" ]] && [[ -f "$DOTFILES_DIR/shell/wsl-functions.sh" ]] && source "$DOTFILES_DIR/shell/wsl-functions.sh"

# Load aliases
for file in "$DOTFILES_DIR"/shell/aliases/*.sh; do
    [[ -r "$file" ]] && source "$file"
done


# ==============================================================================
# Local Configuration
# ==============================================================================

# Source local configuration if it exists (not tracked in git)
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local