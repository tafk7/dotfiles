#!/bin/bash
# Theme Switcher - Unified theme management for neovim, tmux, and shell
# Part of dotfiles - seamless theme switching across all tools

set -e

# ==============================================================================
# Configuration
# ==============================================================================

# Path constants
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# DOTFILES_DIR set by lib.sh (uses environment or calculates from BASH_SOURCE)
DOTFILES_DIR="${DOTFILES_DIR:-$(dirname "$SCRIPT_DIR")}"
readonly THEMES_DIR="$DOTFILES_DIR/configs/themes"
readonly CONFIG_DIR="$HOME/.config/dotfiles"
readonly THEME_FILE="$CONFIG_DIR/current-theme"
readonly BACKUP_FILE="$CONFIG_DIR/previous-theme"

# Source common functions
source "$DOTFILES_DIR/lib.sh"

# Available themes
declare -A THEMES=(
    ["nord"]="Nord - Arctic, clean, bluish palette"
    ["kanagawa"]="Kanagawa - Japanese-inspired, warm and balanced"
    ["tokyo-night"]="Tokyo Night - Vibrant cyberpunk aesthetic"
    ["gruvbox-material"]="Gruvbox Material - Softer variant of gruvbox"
    ["catppuccin-mocha"]="Catppuccin Mocha - Modern pastel, dark variant"
)

# Default theme
DEFAULT_THEME="gruvbox-material"

# ==============================================================================
# Helper Functions
# ==============================================================================

# Check if a theme exists
theme_exists() {
    local theme="$1"
    [[ -d "$THEMES_DIR/$theme" ]]
}

# Get current theme
get_current_theme() {
    if [[ -f "$THEME_FILE" ]]; then
        cat "$THEME_FILE"
    else
        echo "$DEFAULT_THEME"
    fi
}

# Save current theme
save_current_theme() {
    local theme="$1"
    mkdir -p "$CONFIG_DIR"
    echo "$theme" > "$THEME_FILE"
}

# Create backup of current configuration
backup_current_config() {
    # Simple backup - just save the current theme name
    local current_theme=$(get_current_theme)
    if [[ -n "$current_theme" ]]; then
        echo "$current_theme" > "$BACKUP_FILE"
    fi
}

# ==============================================================================
# Theme Application Functions
# ==============================================================================

# Validate theme has all required files
validate_theme_files() {
    local theme="$1"
    local missing_files=()
    
    # Required theme files
    local required_files=(
        "$THEMES_DIR/$theme/vim.vim"
        "$THEMES_DIR/$theme/tmux.conf"
        "$THEMES_DIR/$theme/shell.sh"
        "$THEMES_DIR/$theme/colors.sh"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            missing_files+=("$(basename "$file")")
        fi
    done
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        error "Theme '$theme' is missing required files: ${missing_files[*]}"
        return 1
    fi
    
    return 0
}

# Apply neovim theme
apply_vim_theme() {
    local theme="$1"
    local vim_theme_file="$THEMES_DIR/$theme/vim.vim"
    
    if [[ ! -f "$vim_theme_file" ]]; then
        warn "Vim theme file not found for $theme"
        return 1
    fi
    
    # Create neovim theme loader file
    local vim_loader="$HOME/.config/nvim/theme.vim"
    mkdir -p "$(dirname "$vim_loader")"
    
    cat > "$vim_loader" << EOF
" Theme loader - Auto-generated by theme-switcher
" Current theme: $theme
source $vim_theme_file
EOF
    
    success "Vim theme applied: $theme"
}

# Apply tmux theme
apply_tmux_theme() {
    local theme="$1"
    local tmux_theme_file="$THEMES_DIR/$theme/tmux.conf"
    
    if [[ ! -f "$tmux_theme_file" ]]; then
        warn "Tmux theme file not found for $theme"
        return 1
    fi
    
    # Create tmux theme loader file
    local tmux_loader="$HOME/.tmux/theme.conf"
    mkdir -p "$(dirname "$tmux_loader")"
    
    cat > "$tmux_loader" << EOF
# Theme loader - Auto-generated by theme-switcher
# Current theme: $theme
source-file $tmux_theme_file
EOF
    
    # Reload tmux if running
    if command -v tmux >/dev/null 2>&1 && tmux info &>/dev/null; then
        tmux source-file "$HOME/.tmux.conf" 2>/dev/null || true
        success "Tmux theme applied and reloaded: $theme"
    else
        success "Tmux theme applied: $theme (restart tmux to see changes)"
    fi
}

# Apply shell theme (FZF and prompt colors)
apply_shell_theme() {
    local theme="$1"
    local shell_theme_file="$THEMES_DIR/$theme/shell.sh"
    
    if [[ ! -f "$shell_theme_file" ]]; then
        warn "Shell theme file not found for $theme"
        return 1
    fi
    
    # Create shell theme loader file
    local shell_loader="$HOME/.config/dotfiles/theme.sh"
    mkdir -p "$(dirname "$shell_loader")"
    
    cat > "$shell_loader" << EOF
# Theme loader - Auto-generated by theme-switcher
# Current theme: $theme
export DOTFILES_THEME="$theme"
source $shell_theme_file
EOF
    
    success "Shell theme applied: $theme (restart shell to see changes)"
}

# Apply all theme components
apply_theme() {
    local theme="$1"
    
    if ! theme_exists "$theme"; then
        error "Theme not found: $theme"
        return 1
    fi
    
    # Validate theme has all required files
    if ! validate_theme_files "$theme"; then
        error "Cannot apply incomplete theme: $theme"
        return 1
    fi
    
    info "Applying theme: $theme"
    
    # Backup current configuration
    backup_current_config
    
    # Apply theme to each component
    apply_vim_theme "$theme"
    apply_tmux_theme "$theme"
    apply_shell_theme "$theme"
    
    # Save current theme
    save_current_theme "$theme"
    
    success "Theme '$theme' has been applied successfully!"
    echo
    info "To see all changes:"
    info "  - Restart your shell or run: source ~/.bashrc (or ~/.zshrc)"
    info "  - Restart neovim or run: :source ~/.config/nvim/init.vim"
    info "  - Tmux has been reloaded automatically (if running)"
}

# ==============================================================================
# Interactive Functions
# ==============================================================================

# Show theme preview
preview_theme() {
    local theme="$1"
    
    if ! theme_exists "$theme"; then
        error "Theme not found: $theme"
        return 1
    fi
    
    # Validate theme files exist for preview
    if ! validate_theme_files "$theme"; then
        error "Cannot preview incomplete theme: $theme"
        return 1
    fi
    
    echo "Theme Preview: $theme"
    echo "===================="
    
    # Show color samples if available
    local colors_file="$THEMES_DIR/$theme/colors.sh"
    if [[ -f "$colors_file" ]]; then
        source "$colors_file"
        echo
        echo "Color Palette:"
        echo -e "  Background: \033[48;2;${THEME_BG_R};${THEME_BG_G};${THEME_BG_B}m     \033[0m #$(printf '%02x%02x%02x' $THEME_BG_R $THEME_BG_G $THEME_BG_B)"
        echo -e "  Foreground: \033[38;2;${THEME_FG_R};${THEME_FG_G};${THEME_FG_B}m███\033[0m #$(printf '%02x%02x%02x' $THEME_FG_R $THEME_FG_G $THEME_FG_B)"
        echo -e "  Primary:    \033[38;2;${THEME_PRIMARY_R};${THEME_PRIMARY_G};${THEME_PRIMARY_B}m███\033[0m #$(printf '%02x%02x%02x' $THEME_PRIMARY_R $THEME_PRIMARY_G $THEME_PRIMARY_B)"
        echo -e "  Secondary:  \033[38;2;${THEME_SECONDARY_R};${THEME_SECONDARY_G};${THEME_SECONDARY_B}m███\033[0m #$(printf '%02x%02x%02x' $THEME_SECONDARY_R $THEME_SECONDARY_G $THEME_SECONDARY_B)"
    fi
    
    echo
    echo "Description: ${THEMES[$theme]}"
}

# Interactive theme selection with FZF
interactive_select() {
    if ! command -v fzf >/dev/null 2>&1; then
        error "FZF is required for interactive selection"
        return 1
    fi
    
    local current_theme=$(get_current_theme)
    local selected_theme
    
    selected_theme=$(
        for theme in "${!THEMES[@]}"; do
            if [[ "$theme" == "$current_theme" ]]; then
                echo "* $theme - ${THEMES[$theme]}"
            else
                echo "  $theme - ${THEMES[$theme]}"
            fi
        done | sort | fzf --ansi --preview "bash $0 --preview {2}" --preview-window=right:50%:wrap | awk '{print $2}'
    )
    
    if [[ -n "$selected_theme" ]]; then
        apply_theme "$selected_theme"
    fi
}

# List available themes
list_themes() {
    local current_theme=$(get_current_theme)
    
    echo "Available Themes:"
    echo "================="
    
    for theme in "${!THEMES[@]}"; do
        if [[ "$theme" == "$current_theme" ]]; then
            echo "* $theme - ${THEMES[$theme]} [CURRENT]"
        else
            echo "  $theme - ${THEMES[$theme]}"
        fi
    done | sort
}

# ==============================================================================
# Main Function
# ==============================================================================

show_help() {
    cat << EOF
Theme Switcher - Unified theme management for neovim, tmux, and shell

USAGE:
    ./bin/theme-switcher [OPTIONS] [THEME]

OPTIONS:
    --list, -l          List available themes
    --current, -c       Show current theme
    --preview, -p       Preview theme without applying
    --revert, -r        Revert to previous theme
    --help, -h          Show this help message

THEMES:
    nord                Nord - Arctic, clean palette
    kanagawa           Kanagawa - Japanese-inspired
    tokyo-night        Tokyo Night - Cyberpunk aesthetic
    gruvbox-material   Gruvbox Material - Softer gruvbox
    catppuccin-*       Catppuccin variants (mocha, macchiato, frappe, latte)

EXAMPLES:
    ./bin/theme-switcher                    # Interactive selection with FZF
    ./bin/theme-switcher nord              # Apply Nord theme
    ./bin/theme-switcher --preview tokyo-night  # Preview without applying
    ./bin/theme-switcher --list            # List all available themes

EOF
}

main() {
    case "${1:-}" in
        --list|-l)
            list_themes
            ;;
        --current|-c)
            echo "Current theme: $(get_current_theme)"
            ;;
        --preview|-p)
            preview_theme "${2:-}"
            ;;
        --revert|-r)
            if [[ -f "$BACKUP_FILE" ]]; then
                local previous_theme=$(cat "$BACKUP_FILE" 2>/dev/null)
                if [[ -n "$previous_theme" && "$previous_theme" != "$(get_current_theme)" ]]; then
                    apply_theme "$previous_theme"
                else
                    error "No different previous theme found to revert to"
                fi
            else
                error "No backup found - cannot revert theme"
            fi
            ;;
        --help|-h)
            show_help
            ;;
        "")
            interactive_select
            ;;
        *)
            apply_theme "$1"
            ;;
    esac
}

# Execute main function
main "$@"